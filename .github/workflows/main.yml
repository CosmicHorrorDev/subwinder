name: Check Styling, Formatting, and Tests

# Trigger workflow on push or pull_request
on: [push, pull_request]

jobs:
  build:

    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        os: [Ubuntu, MacOS, Windows]
        python-version: [3.7, 3.8]

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Get Full Python Version
      id: full-python-version
      shell: bash
      run: echo ::set-output name=version::$(python -c "import sys; print('.'.join(str(v) for v in sys.version_info))")

    - name: Check Linux poetry cache
      uses: actions/cache@v1
      if: startsWith(runner.os, 'Linux')
      id: cache-linux
      with:
        path: ~/.cache/pypoetry/virtualenvs
        key: poetry-venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Check Mac poetry cache
      uses: actions/cache@v1
      if: startsWith(runner.os, 'macOS')
      id: cache-mac
      with:
        path: ~/Library/Caches/pypoetry/virtualenvs
        key: poetry-venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Check Windows poetry cache
      uses: actions/cache@v1
      if: startsWith(runner.os, 'Windows')
      id: cache-windows
      with:
        path: ~\AppData\Local\pypoetry\Cache\virtualenvs
        key: poetry-venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install poetry
      run: |
        python -m pip install --upgrade pip
        pip install poetry

    - name: Install dependencies
      # If this is cached then it should still use the cache, but there are some issues
      # where the cached venv seems to not be used (granted we don't lock this to one
      # poetry version so that doesn't help reproduction)
      run:
        poetry install

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Error on warnings because I'm strict
        poetry run flake8 . --count --statistics

    - name: Check black formatting
      run: |
        poetry run black --check .

    - name: Test with pytest
      run: |
        poetry run pytest
